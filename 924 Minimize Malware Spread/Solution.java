class Solution {
    /*
        union connected graph. 
        foreach initial find the number of its group.
    */
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        UF uf = new UF(graph.length);
        for (int i = 0; i < graph.length; i++) {
            for (int j = i+1; j < graph[0].length; j++) {
                if (graph[i][j] == 1)
                    uf.union(i, j);
            }
        }
        
        //System.out.println(Arrays.toString(uf.parents));
        //System.out.println(Arrays.toString(uf.ranks));
        int max = 0, maxIndex = 0;
        Arrays.sort(initial);
        for (int i = initial.length-1; i >= 0; i--) {
            int num = uf.getNumber(initial[i]);
            if (num >= max) {
                max = num;
                maxIndex = initial[i];
            }
        }
        return maxIndex;
    }
    
    
    class UF {
        int[] parents;
        int[] ranks;
        
        public UF(int n) {
            this.parents = new int[n];
            this.ranks = new int[n];
            Arrays.fill(ranks, 1);
            for (int i = 0; i < n; i++) {
                parents[i] = i;
            }
        }
        
        public void union(int a, int b) {
            int pa = find(a);
            int pb = find(b);
            if (pa != pb) {
                parents[pa] = pb;
                ranks[pb] += ranks[pa];
            }
        }
        
        public int find(int a) {
            if (parents[a] != a) {
                parents[a] = find(parents[a]);
            }
            return parents[a];
        }
        
        public int getNumber(int a) {
            int pa = find(a);
            return ranks[pa];
        }
        
    }
}